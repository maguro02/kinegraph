
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async createProject(args: CreateProjectArgs) : Promise<Result<Project, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_project", { args }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSystemInfo() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_system_info") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createLayer(layerId: string, width: number, height: number) : Promise<Result<DrawResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_layer", { layerId, width, height }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async drawLine(args: DrawLineArgs) : Promise<Result<DrawResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("draw_line", { args }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async drawStroke(args: DrawStrokeArgs) : Promise<Result<DrawResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("draw_stroke", { args }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getLayerData(layerId: string) : Promise<Result<number[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_layer_data", { layerId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * 描画エンジンを初期化
 */
async initializeDrawingEngine() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("initialize_drawing_engine") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * レイヤーを作成
 */
async createDrawingLayer(layerId: string, width: number, height: number) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_drawing_layer", { layerId, width, height }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * レイヤーに線を描画
 */
async drawLineOnLayer(layerId: string, x1: number, y1: number, x2: number, y2: number, color: [number, number, number, number], width: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("draw_line_on_layer", { layerId, x1, y1, x2, y2, color, width }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async drawStrokeOnLayer(layerId: string, points: StrokePoint[], color: [number, number, number, number]) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("draw_stroke_on_layer", { layerId, points, color }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * レイヤーの画像データを取得
 */
async getLayerImageData(layerId: string) : Promise<Result<number[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_layer_image_data", { layerId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * レイヤーをクリア
 */
async clearLayer(layerId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clear_layer", { layerId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * レイヤーを削除
 */
async removeLayer(layerId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("remove_layer", { layerId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getDrawingStats() : Promise<Result<DrawingStats, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_drawing_stats") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * 未使用のテクスチャをクリーンアップ
 */
async cleanupTextures() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("cleanup_textures") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getDetailedEngineState() : Promise<Result<DetailedEngineState, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_detailed_engine_state") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getAllLayersInfo() : Promise<Result<LayerInfo[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_all_layers_info") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSystemMemoryInfo() : Promise<Result<SystemMemoryInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_system_memory_info") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * デバッグ用：詳細状態をログに出力
 */
async logDetailedState() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("log_detailed_state") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type BlendMode = "Normal" | "Multiply" | "Screen" | "Overlay"
export type CreateProjectArgs = { name: string; width: number; height: number; frame_rate: number }
/**
 * デバッグ用：描画エンジンの詳細状態を取得
 */
export type DetailedEngineState = { engine_initialized: boolean; layers: ([string, number, number])[]; memory_used: number; memory_limit: number; active_textures: number; total_textures: number }
export type DrawLineArgs = { layer_id: string; start_x: number; start_y: number; end_x: number; end_y: number; color: [number, number, number, number]; width: number; canvas_width: number; canvas_height: number }
export type DrawResult = { success: boolean; message: string }
export type DrawStrokeArgs = { layer_id: string; points: DrawStrokePoint[]; color: [number, number, number, number]; base_width: number; canvas_width: number; canvas_height: number }
export type DrawStrokePoint = { x: number; y: number; pressure: number }
/**
 * 描画エンジンの統計情報を取得
 */
export type DrawingStats = { layers_count: number; memory_used: number; memory_limit: number; active_textures: number; total_textures: number }
export type Frame = { id: string; layers: Layer[]; duration: number }
export type Layer = { id: string; name: string; visible: boolean; opacity: number; blend_mode: BlendMode; locked: boolean }
/**
 * デバッグ用：全レイヤーの詳細情報を取得
 */
export type LayerInfo = { layer_id: string; width: number; height: number; exists_in_engine: boolean }
export type Project = { name: string; width: number; height: number; frame_rate: number; frames: Frame[] }
/**
 * レイヤーにストロークを描画（筆圧対応）
 */
export type StrokePoint = { x: number; y: number; pressure: number }
/**
 * デバッグ用：システムメモリ使用量を取得
 */
export type SystemMemoryInfo = { process_memory_mb: number; available_memory_mb: number; texture_memory_mb: number }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
